version: '3.1'

# to make use of this compose, make sure your local.env has these settings:
#
# SURF_DATABASE_URL=mysql://root:@127.0.0.1:23306/surface
# SURF_ALLOWED_HOSTS=*
# SURF_DKRON_WEB_PORT=8888
# SURF_DKRON_URL=http://localhost:8888/
# SURF_DKRON_SERVER=true
#

x-env: &env
  env_file:
    - ../surface/local.env
  environment:
    SURF_DATABASE_URL: psql://surface:surfdbpassword@postgres/surface
    SURF_DKRON_URL: http://dkron:8888/
    SURF_DKRON_BIN_DIR: /surface/dev/dkronlinux
    SURF_DKRON_NODE_NAME: surfdkron

x-surf: &surf
  <<: *env
  build:
    context: ..
    dockerfile: dev/Dockerfile-IN-A-BOX
  working_dir: /surface/surface
  depends_on:
    - postgres
  volumes:
    - ..:/surface
  deploy:
    restart_policy:
      condition: on-failure
      delay: 5s

services:
  surface:
    <<: *surf
    command: ./manage.py runserver 0.0.0.0:8000

  dkron:
    <<: *surf
    command: ./manage.py run_dkron -s
  
  resync-rootbox:
    <<: *surf
    command: ./manage.py resync_rootbox

  nginx:
    # optional in dev - use for staticfiles in production
    <<: *env
    image: ghcr.io/surface-security/nginx:1.19-alpine
    environment:
      # add proper ALLOWED_HOSTS if production (or remove if already defined in an local.env)
      SURF_ALLOWED_HOSTS: '*'
      NGINX_APP_IP: surface
      NGINX_APP_PORT: 8000
      SURF_STATIC_ROOT: ''
    depends_on:
      - surface
    ports:
      - 8080:8080
    volumes:
      - ./media:/surface/media/
      - ./nginx.template.conf:/etc/nginx/templates/default.conf.template:ro

  postgres:
    image: postgres:14.1-alpine
    ports:
      - 35432:5432
    environment:
      POSTGRES_PASSWORD: surfdbpassword
      POSTGRES_USER: surface
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgsql_data:/var/lib/postgresql/data

  dockerd:
    # isolated docker host to test scanners
    image: docker:20.10-dind
    environment:
      DOCKER_TLS_CERTDIR: ''
    command: --tls=false
    privileged: true


volumes:
  pgsql_data: {}
