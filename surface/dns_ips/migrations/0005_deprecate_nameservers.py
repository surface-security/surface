# Generated by Django 3.2.16 on 2023-01-25 18:13

from django.db import migrations, models


def move_data_over(apps, db_schema):
    """
    Take existing domain models, and move the dns nameservers to a single joint field in register_nameserver, separated
    by a comma. It excludes domain entries without any register_nameserver or dns_nameservers, because those have no
    data. For better speed/less noise in the DB, this function will create a temporary dict with the updated objects,
    to then call `bulk_update` for a cleaner fingerprint. `bulk_update` is called with a batch_size of 500 as there are
    a awful lot of entries in this model and hopefully that will help reduce issues with database locks.
    """
    domain_mod = apps.get_model("dns_ips", "dnsdomain")
    updated_domains = dict()
    for domain in (
        domain_mod.objects.all()
        .prefetch_related('dns_nameservers__name')
        .exclude(register_nameservers=None, dns_nameservers=None)
        .values('id', 'nameservers', 'register_nameservers__name', 'dns_nameservers__name')
    ):
        obj = dict(id=domain['id'])

        if domain.get('register_nameservers__name') is not None:
            obj['nameservers'] = domain['register_nameservers__name']
        elif domain.get('dns_nameservers__name') is not None:
            obj['nameservers'] = domain['dns_nameservers__name']

        if existing := updated_domains.get(obj['id']):
            existing['nameservers'] = f'{existing["nameservers"]}, {obj["nameservers"]}'
            updated_domains[obj['id']].update(existing)
        else:
            updated_domains[obj['id']] = obj

    domain_mod.objects.bulk_update(
        [domain_mod(**kv) for kv in updated_domains.values()], ['nameservers'], batch_size=500
    )


class Migration(migrations.Migration):

    dependencies = [
        ('dns_ips', '0004_deprecate_iprangethird_party'),
    ]

    operations = [
        migrations.AddField(
            model_name='dnsdomain',
            name='nameservers',
            field=models.TextField(help_text='list of nameservers associated, separated by comma'),
        ),
        migrations.RunPython(move_data_over, reverse_code=migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='dnsdomain',
            name='register_nameservers',
        ),
        migrations.RemoveField(
            model_name='dnsdomain',
            name='dns_nameservers',
        ),
        migrations.RenameField(
            model_name='dnsdomain',
            old_name='nameservers',
            new_name='register_nameservers',
        ),
        migrations.DeleteModel(
            name='DNSNameserver',
        ),
    ]
