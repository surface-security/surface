# Generated by Django 3.2.12 on 2023-01-06 16:21

from ipaddress import ip_network

from django.db import migrations, models
from django.db.utils import IntegrityError


def tag_existing_ranges(apps, db_schema):
    iprange = apps.get_model("dns_ips", "iprange")
    iprange3rd = apps.get_model("dns_ips", "iprangethirdparty")
    internal_tag = apps.get_model("dns_ips", "tag").objects.filter(name="is_internal").first()
    external_tag = apps.get_model("dns_ips", "tag").objects.filter(name="is_external").first()
    trd_party_tag = apps.get_model("dns_ips", "tag").objects.filter(name="is_third_party").first()

    for thrdpartyrange in iprange3rd.objects.all():
        for rng in iprange.objects.filter(range=thrdpartyrange.range.range).exclude(tags__id=trd_party_tag.id):
            if rng.description is None and thrdpartyrange.description is not None:
                rng.description = thrdpartyrange.description

            try:
                if ip_network(rng.range).is_private:
                    rng.tags.add(internal_tag.id, trd_party_tag.id)
                else:
                    rng.tags.add(external_tag.id, trd_party_tag.id)
            except ValueError or IntegrityError:
                continue


class Migration(migrations.Migration):

    dependencies = [
        ("dns_ips", "0003_alter_dnsrecord_tla"),
    ]

    operations = [
        migrations.AddField(
            model_name="iprange",
            name="tags",
            field=models.ManyToManyField(blank=True, to="dns_ips.Tag"),
        ),
        migrations.RunPython(tag_existing_ranges, reverse_code=migrations.RunPython.noop),
        migrations.DeleteModel("iprangethirdparty"),
    ]
